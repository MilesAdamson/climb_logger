// Mocks generated by Mockito 5.1.0 from annotations
// in climb_logger/test/mocks.dart.
// Do not manually edit this file.

import 'dart:async' as _i6;

import 'package:climb_logger/models/user_model.dart' as _i10;
import 'package:climb_logger/services/ad_service.dart' as _i9;
import 'package:climb_logger/state/app_state.dart' as _i2;
import 'package:climb_logger/state/bloc.dart' as _i5;
import 'package:climb_logger/state/events.dart' as _i7;
import 'package:cloud_firestore/cloud_firestore.dart' as _i4;
import 'package:flutter_bloc/flutter_bloc.dart' as _i8;
import 'package:google_mobile_ads/google_mobile_ads.dart' as _i3;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types

class _FakeAppState_0 extends _i1.Fake implements _i2.AppState {}

class _FakeBannerAd_1 extends _i1.Fake implements _i3.BannerAd {}

class _FakeDocumentReference_2<T extends Object?> extends _i1.Fake
    implements _i4.DocumentReference<T> {}

class _FakeSnapshotMetadata_3 extends _i1.Fake implements _i4.SnapshotMetadata {
}

/// A class which mocks [AppStateBloc].
///
/// See the documentation for Mockito's code generation for more information.
class MockBloc extends _i1.Mock implements _i5.AppStateBloc {
  @override
  _i2.AppState get state => (super.noSuchMethod(Invocation.getter(#state),
      returnValue: _FakeAppState_0()) as _i2.AppState);
  @override
  _i6.Stream<_i2.AppState> get stream => (super.noSuchMethod(
      Invocation.getter(#stream),
      returnValue: Stream<_i2.AppState>.empty()) as _i6.Stream<_i2.AppState>);
  @override
  bool get isClosed =>
      (super.noSuchMethod(Invocation.getter(#isClosed), returnValue: false)
          as bool);
  @override
  _i6.Future<void> close() => (super.noSuchMethod(Invocation.method(#close, []),
      returnValue: Future<void>.value(),
      returnValueForMissingStub: Future<void>.value()) as _i6.Future<void>);
  @override
  void add(_i7.Event? event) =>
      super.noSuchMethod(Invocation.method(#add, [event]),
          returnValueForMissingStub: null);
  @override
  void onEvent(_i7.Event? event) =>
      super.noSuchMethod(Invocation.method(#onEvent, [event]),
          returnValueForMissingStub: null);
  @override
  void emit(_i2.AppState? state) =>
      super.noSuchMethod(Invocation.method(#emit, [state]),
          returnValueForMissingStub: null);
  @override
  void on<E extends _i7.Event>(_i8.EventHandler<E, _i2.AppState>? handler,
          {_i8.EventTransformer<E>? transformer}) =>
      super.noSuchMethod(
          Invocation.method(#on, [handler], {#transformer: transformer}),
          returnValueForMissingStub: null);
  @override
  void onTransition(_i8.Transition<_i7.Event, _i2.AppState>? transition) =>
      super.noSuchMethod(Invocation.method(#onTransition, [transition]),
          returnValueForMissingStub: null);
  @override
  void onChange(_i8.Change<_i2.AppState>? change) =>
      super.noSuchMethod(Invocation.method(#onChange, [change]),
          returnValueForMissingStub: null);
  @override
  void addError(Object? error, [StackTrace? stackTrace]) =>
      super.noSuchMethod(Invocation.method(#addError, [error, stackTrace]),
          returnValueForMissingStub: null);
  @override
  void onError(Object? error, StackTrace? stackTrace) =>
      super.noSuchMethod(Invocation.method(#onError, [error, stackTrace]),
          returnValueForMissingStub: null);
}

/// A class which mocks [AdService].
///
/// See the documentation for Mockito's code generation for more information.
class MockAdService extends _i1.Mock implements _i9.AdService {
  @override
  _i6.Future<void> init() => (super.noSuchMethod(Invocation.method(#init, []),
      returnValue: Future<void>.value(),
      returnValueForMissingStub: Future<void>.value()) as _i6.Future<void>);
  @override
  _i3.BannerAd getBannerAd() =>
      (super.noSuchMethod(Invocation.method(#getBannerAd, []),
          returnValue: _FakeBannerAd_1()) as _i3.BannerAd);
  @override
  _i6.Future<void> showAd() =>
      (super.noSuchMethod(Invocation.method(#showAd, []),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i6.Future<void>);
}

/// A class which mocks [DocumentSnapshot].
///
/// See the documentation for Mockito's code generation for more information.
class MockUserDoc extends _i1.Mock
    implements _i4.DocumentSnapshot<_i10.UserModel> {
  @override
  String get id =>
      (super.noSuchMethod(Invocation.getter(#id), returnValue: '') as String);
  @override
  _i4.DocumentReference<_i10.UserModel> get reference =>
      (super.noSuchMethod(Invocation.getter(#reference),
              returnValue: _FakeDocumentReference_2<_i10.UserModel>())
          as _i4.DocumentReference<_i10.UserModel>);
  @override
  _i4.SnapshotMetadata get metadata =>
      (super.noSuchMethod(Invocation.getter(#metadata),
          returnValue: _FakeSnapshotMetadata_3()) as _i4.SnapshotMetadata);
  @override
  bool get exists =>
      (super.noSuchMethod(Invocation.getter(#exists), returnValue: false)
          as bool);
  @override
  dynamic get(Object? field) =>
      super.noSuchMethod(Invocation.method(#get, [field]));
  @override
  dynamic operator [](Object? field) =>
      super.noSuchMethod(Invocation.method(#[], [field]));
}
